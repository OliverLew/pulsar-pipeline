#!/usr/bin/env python
import os
import logging
import argparse
import subprocess

logging.basicConfig(level=logging.INFO, format="%(filename)s: %(message)s")

pkgs = []
for pkg in [{"module": "bs4", "package": "beautifulsoup4"},
            {"module": "requests", "package": "requests"},
            {"module": "numpy", "package": "numpy"},
            {"module": "matplotlib", "package": "matplotlib"}]:
    try:
        __import__(pkg["module"])
    except ImportError:
        pkgs.append(pkg["package"])
if len(pkgs) > 0:
    logging.info("please install the following python modules:")
    logging.info("\t{}".format("\n\t".join(pkgs)))
    logging.info("pip install --user {}".format(" ".join(pkgs)))
    exit(1)

parser = argparse.ArgumentParser(description="")
parser.add_argument('ra', nargs="?", default="97", help="unit: degree")
parser.add_argument('dec', nargs="?", default="8", help="unit: degree")
parser.add_argument('radius', nargs="?", default="2", help="unit: degree")
parser.add_argument('-j', '--threads', help="default to maximum available")
args = parser.parse_args()

if os.path.exists("jobfile"):
    with open("jobfile") as f:
        ra, dec, radius = [float(i) for i in f.readline().split()]
        if float(args.ra) != ra or float(args.dec) != dec \
                or float(args.radius) != radius:
            os.remove(os.path.join("result", "data.csv"))
with open("jobfile", "w") as f:
    f.write("{} {} {}".format(args.ra, args.dec, args.radius))

if not os.path.exists(os.path.join("result", "data.csv")):
    logging.info("Downloading new data")
    p = subprocess.run(["python", "./fetchdata.py",
                        "-c", args.ra, args.dec,
                        "-r", args.radius])
    if p.returncode:
        logging.error("Error downloading data!")
        exit(p.returncode)
else:
    logging.info("data.csv exists! Using the current data file ...")

logging.info("Compiling source code")
if subprocess.run(["gfortran", "./FVM.f90", "-o", "FVM"]).returncode:
    exit(1)

logging.info("Running calculations for all sources")
if args.threads:
    p = subprocess.run(["python", "./run.py", "./FVM", "-j", args.threads])
else:
    p = subprocess.run(["python", "./run.py", "./FVM"])

if p.returncode:
    exit(p.returncode)

logging.info("Generating plots and report")
subprocess.run(["python", "./plot.py"])
